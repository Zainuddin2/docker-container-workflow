name: CI CD Develop

on:
  push:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: Install dependencies
        run: npm install

      - name: Build container
        run: |
          docker build -t my-container .
          docker images

      - name: Run container
        run: |
          docker run -d -p 3000:3000 --name my-container-instance my-container
          docker ps -a

      - name: Wait for application to start
        run: sleep 10

      - name: Test application
        run: |
          response=$(curl -sS localhost:3000)
          echo "Response: $response"
          if [[ $response == *"Api is running..."* ]]; then
            echo "Application is working correctly."
          else
            echo "Application is not responding as expected."
            exit 1
          fi

  unit-testing:
    runs-on: ubuntu-latest
    steps:
      - name: Tests started
        run: sleep 10
      - name: Test Ended
        run: echo "tests successful"
  linting:
    runs-on: ubuntu-latest
    steps:
      - name: Linting started
        run: sleep 10
      - name: Linting Ended
        run: echo "linting successful"
  sonarcloud-scan:
    runs-on: ubuntu-latest
    steps:
      - name: SonarCloud Scan
        run: sleep 10
      - name: SonarCloud Ended
        run: echo "SonarCloud scan successful"
        
#       - name: SonarCloud Scan
#         uses: SonarSource/sonarcloud-github-action@master
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy-to-qa:
    runs-on: ubuntu-latest
    needs: [build, unit-testing, linting, sonarcloud-scan]
    environment: 'qa'
    steps:
      - name: terraform plan and apply to qa
        run: sleep 10
      - name: terraform test
        run: echo "terraform apply to qa successful"
        
  automated-qa-tests:
    runs-on: ubuntu-latest
    needs: [deploy-to-qa]
    steps:
      - name: Run some tests
        run: sleep 10
      - name: terraform test
        run: echo "all QA tests successful"
        
  deploy-to-uat:
    runs-on: ubuntu-latest
    needs: [automated-qa-tests]
    steps:
      - name: terraform plan and apply to UAT
        run: sleep 10
      - name: terraform test
        run: echo "terraform apply to UAT successful"
        
  automated-uat-tests:
    runs-on: ubuntu-latest
    needs: [deploy-to-uat]
    steps:
      - name: Run some tests
        run: sleep 10
      - name: terraform test
        run: echo "all QA tests successful"   
        
  merge-to-master:
    runs-on: ubuntu-latest
    needs: [automated-uat-tests]
    steps:
      - name: Run some tests
        run: echo "Merge to master completed" 
        
  deploy-to-prod:
    runs-on: ubuntu-latest
    needs: [merge-to-master]
    steps:
      - name: Start Prod Deployment
        run: sleep 10
      - name: terraform test
        run: echo "terraform apply to Prod successful"
